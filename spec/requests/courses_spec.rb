require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/courses", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Course. As you add validations to Course, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { name: 'test course', description: 'test1234' } }

  let(:invalid_attributes) { { name: 'test course', description: '' } }

  let(:school) { create(:school) }
  let(:school_admin)   { create(:user, :school_admin) }
  let(:admin)  { create(:user, :admin) }
  let(:student) { create(:user) }

  let!(:school_user) { create(:school_user, user: school_admin, school: school) }
  let!(:student_school_user) { create(:school_user, user: student, school: school) }

  let(:course) { create(:course, school: school) }

  describe "GET /index" do
    context "As a Admin" do
      it "renders a successful response" do
        sign_in admin
        get school_courses_url(school.id)
        expect(response).to be_successful
      end
    end

    context "As a School Admin" do
      it "renders a successful response" do
        sign_in school_admin
        get school_courses_url(school.id)
        expect(response).to be_successful
      end
    end

    context "As a Student" do
      it "renders a successful response" do
        sign_in student
        get school_courses_url(school.id)
        expect(response).to be_successful
      end
    end
  end

  describe "GET /show" do
    context "As a Admin user" do
      it "renders a successful response" do
        sign_in admin
        get school_course_url(school, course)
        expect(response).to be_successful
      end
    end

    context "As a School Admin" do
      it "renders a successful response" do
        sign_in school_admin
        get school_course_url(school, course)
        expect(response).to be_successful
      end
    end

    context "As a Student" do
      it "renders a successful response" do
        sign_in student
        get school_course_url(school, course)
        expect(response).to be_successful
      end
    end
  end

  describe "GET /new" do
    context "As a Admin" do
      it "renders a successful response" do
        sign_in admin
        get new_school_course_url(school)
        expect(response).to be_successful
      end
    end

    context "As a School Admin" do
      it "renders a successful response" do
        sign_in school_admin
        get new_school_course_url(school)
        expect(response).to be_successful
      end
    end

    context "As a Student" do
      it "renders a un-successful response" do
        sign_in student
        get new_school_course_url(school)
        expect(response).not_to be_successful
      end
    end
  end

  describe "GET /edit" do
    context "As a Admin" do
      it "renders a successful response" do
        sign_in admin
        get edit_school_course_url(school, course)
        expect(response).to be_successful
      end
    end

    context "As a School Admin" do
      it "renders a successful response" do
        sign_in school_admin
        get edit_school_course_url(school, course)
        expect(response).to be_successful
      end
    end

    context "As a Student" do
      it "renders a un-successful response" do
        sign_in student
        get edit_school_course_url(school, course)
        expect(response).not_to be_successful
      end
    end
  end

  describe "POST /create" do
    context "As a Admin" do
      context "with valid parameters" do
        it "creates a new Course" do
          sign_in admin
          expect {
            post school_courses_path(school), params: { course: valid_attributes }
          }.to change(Course, :count).by(1)
        end

        it "redirects to the created course" do
          sign_in admin
          post school_courses_url(school), params: { course: valid_attributes }
          expect(response).to redirect_to(school_courses_url(Course.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Course" do
          sign_in admin
          expect {
            post school_courses_url(school), params: { course: invalid_attributes }
          }.to change(Course, :count).by(0)
        end

        it "renders a non-successful response (i.e. to display the 'new' template)" do
          sign_in admin
          post school_courses_url(school), params: { course: invalid_attributes }
          expect(response).not_to be_successful
        end
      end
    end

    context "As a School Admin" do
      context "with valid parameters" do
        it "creates a new Course" do
          sign_in school_admin
          expect {
            post school_courses_path(school), params: { course: valid_attributes }
          }.to change(Course, :count).by(1)
        end

        it "redirects to the created course" do
          sign_in school_admin
          post school_courses_url(school), params: { course: valid_attributes }
          expect(response).to redirect_to(school_courses_url(Course.last))
        end
      end

      context "with invalid parameters" do
        it "does not create a new Course" do
          sign_in school_admin
          expect {
            post school_courses_url(school), params: { course: invalid_attributes }
          }.to change(Course, :count).by(0)
        end

        it "renders a non-successful response (i.e. to display the 'new' template)" do
          sign_in school_admin
          post school_courses_url(school), params: { course: invalid_attributes }
          expect(response).not_to be_successful
        end
      end

    end

    context "As a Student" do
      context "with valid parameters" do
        it "does not create a new Course" do
          sign_in student
          expect {
            post school_courses_path(school), params: { course: valid_attributes }
          }.to change(Course, :count).by(0)
        end
      end
    end
  end

  describe "PATCH /update" do
    context "As a Admin" do
      context "with valid parameters" do
        let(:new_attributes) { {name: "test-course-1"} }

        it "updates the requested course" do
          sign_in admin
          patch school_course_url(school, course), params: { course: new_attributes }
          course.reload
          expect(course.name).to eq("test-course-1")
        end

        it "redirects to the course" do
          sign_in admin
          patch school_course_url(school, course), params: { course: new_attributes }
          course.reload
          expect(response).to redirect_to(school_course_url(school, course))
        end
      end

      context "with invalid parameters" do
        it "renders a un-successful response (i.e. to display the 'edit' template)" do
          sign_in admin
          patch school_course_url(school, course), params: { course: invalid_attributes }
          expect(response).not_to be_successful
        end
      end
    end

    context "As a School Admin" do
      context "with valid parameters" do
        let(:new_attributes) { {name: "test-course-1"} }

        it "updates the requested course" do
          sign_in school_admin
          patch school_course_url(school, course), params: { course: new_attributes }
          course.reload
          expect(course.name).to eq("test-course-1")
        end

        it "redirects to the course" do
          sign_in school_admin
          patch school_course_url(school, course), params: { course: new_attributes }
          course.reload
          expect(response).to redirect_to(school_course_url(school, course))
        end
      end

      context "with invalid parameters" do
        it "renders a un-successful response (i.e. to display the 'edit' template)" do
          sign_in school_admin
          patch school_course_url(school, course), params: { course: invalid_attributes }
          expect(response).not_to be_successful
        end
      end
    end

    context "As a Student" do
      context "with valid parameters" do
        let(:new_attributes) { {name: "test-course-1"} }

        it "does not update the requested course" do
          sign_in student
          patch school_course_url(school, course), params: { course: new_attributes }
          expect(response).not_to be_successful
        end
      end
    end
  end

  describe "DELETE /destroy" do
    context "As a Admin" do
      it "destroys the requested course" do
        sign_in admin
        course
        expect(Course.count).to eq(1)
        expect {
          delete school_course_url(school, course)
        }.to change(Course, :count).by(-1)
      end

      it "redirects to the courses list" do
        sign_in admin
        delete school_course_url(school, course)
        expect(response).to redirect_to(school_courses_url(school))
      end
    end

    context "As a School Admin" do
      it "destroys the requested course" do
        sign_in school_admin
        course
        expect(Course.count).to eq(1)
        expect {
          delete school_course_url(school, course)
        }.to change(Course, :count).by(-1)
      end

      it "redirects to the courses list" do
        sign_in school_admin
        delete school_course_url(school, course)
        expect(response).to redirect_to(school_courses_url(school))
      end
    end

    context "As a Student" do
      it "does not destroy the requested course" do
        sign_in student
        course
        expect(Course.count).to eq(1)
        expect {
          delete school_course_url(school, course)
        }.to change(Course, :count).by(0)
        expect(response).not_to be_successful
      end

      it "redirects to the courses list" do
        sign_in student
        delete school_course_url(school, course)
        expect(response).to redirect_to(root_path)
      end
    end

  end
end
