require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/schools", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # School. As you add validations to School, be sure to
  # adjust the attributes here as well.

  let(:school) { create(:school) }
  let(:school_admin)   { create(:user, :school_admin) }
  let(:admin)  { create(:user, :admin) }
  let(:student) { create(:user) }

  let!(:school_user) { create(:school_user, user: school_admin, school: school) }
  let!(:student_school_user) { create(:school_user, user: student, school: school) }

  let(:valid_attributes) { {name: 'test school', address: 'test address'} }

  let(:invalid_attributes) { {name: '', address: ''} }

  describe "GET /index" do
    context "As a Admin" do
      it "renders a successful response" do
        sign_in admin
        get schools_url
        expect(response).to be_successful
      end
    end

    context "As a School Admin" do
      it "renders a successful response" do
        sign_in school_admin
        get schools_url
        expect(response).to be_successful
      end
    end

    context "As a Student" do
      it "renders a successful response" do
        sign_in student
        get schools_url
        expect(response).to be_successful
      end
    end
  end

  describe "GET /show" do
    context "As a Admin" do
      it "renders a successful response" do
        sign_in admin
        get school_url(school)
        expect(response).to be_successful
      end
    end

    context "As a School Admin" do
      it "renders a successful response" do
        sign_in school_admin
        get school_url(school)
        expect(response).to be_successful
      end
    end

    context "As a Student" do
      it "renders a successful response" do
        sign_in student
        get school_url(school)
        expect(response).to be_successful
      end
    end
  end

  describe "GET /new" do
    context "As a Admin" do
      it "renders a successful response" do
        sign_in admin
        get new_school_url
        expect(response).to be_successful
      end
    end

    context "As a School Admin" do
      it "renders a un-successful response" do
        sign_in school_admin
        get new_school_url
        expect(response).not_to be_successful
      end
    end

    context "As a Student" do
      it "renders a un-successful response" do
        sign_in student
        get new_school_url
        expect(response).not_to be_successful
      end
    end
  end

  describe "GET /edit" do
    context "As a Admin" do
      it "renders a successful response" do
        sign_in admin
        get edit_school_url(school)
        expect(response).to be_successful
      end
    end

    context "As a School Admin" do
      it "renders a successful response" do
        sign_in school_admin
        get edit_school_url(school)
        expect(response).to be_successful
      end
    end

    context "As a Student" do
      it "renders a un-successful response" do
        sign_in student
        get edit_school_url(school)
        expect(response).not_to be_successful
      end
    end
  end

  describe "POST /create" do
    context "As a Admin" do
      context "with valid parameters" do
        it "creates a new School" do
          sign_in admin
          expect {
            post schools_url, params: { school: valid_attributes }
          }.to change(School, :count).by(1)
        end

        it "redirects to the created school" do
          sign_in admin
          post schools_url, params: { school: valid_attributes }
          expect(response).to redirect_to(school_url(School.last))
        end
      end
    
      context "with invalid parameters" do
        it "does not create a new School" do
          sign_in admin
          expect {
            post schools_url, params: { school: invalid_attributes }
          }.to change(School, :count).by(0)
        end

        it "does not render a successful response (i.e. to display the 'new' template)" do
          post schools_url, params: { school: invalid_attributes }
          expect(response).not_to be_successful
        end
      end
    end

    context "As a School Admin" do
      context "with valid parameters" do
        it "can not create a new School" do
          sign_in school_admin
          expect {
            post schools_url, params: { school: valid_attributes }
          }.to change(School, :count).by(0)
        end
      end
    end

    context "As a Student" do
      context "with valid parameters" do
        it "can not create a new School" do
          sign_in student
          expect {
            post schools_url, params: { school: valid_attributes }
          }.to change(School, :count).by(0)
        end
      end
    end
  end

  describe "PATCH /update" do
    context "As a Admin" do
      context "with valid parameters" do
        let(:new_attributes) { { name: 'test-school-2'} }

        it "updates the requested school" do
          sign_in admin
          patch school_url(school), params: { school: new_attributes }
          expect(school.reload.name).to eq('test-school-2')
        end

        it "redirects to the school" do
          sign_in admin
          patch school_url(school), params: { school: new_attributes }
          expect(response).to redirect_to(school_url(school))
        end
      end

      context "with invalid parameters" do
        it "renders a un-successful response (i.e. to display the 'edit' template)" do
          sign_in admin
          patch school_url(school), params: { school: invalid_attributes }
          expect(response).not_to be_successful
        end
      end
    end

    context "As a School Admin" do
      context "with valid parameters" do
        let(:new_attributes) { { name: 'test-school-2'} }

        it "can not update the requested school" do
          sign_in school_admin
          patch school_url(school), params: { school: new_attributes }
          expect(response).not_to be_successful
        end
      end
    end

    context "As a Student" do
      context "with valid parameters" do
        let(:new_attributes) { { name: 'test-school-2'} }

        it "can not update the requested school" do
          sign_in student
          patch school_url(school), params: { school: new_attributes }
          expect(response).not_to be_successful
        end
      end
    end
  end

  describe "DELETE /destroy" do
    context "As a Admin" do
      it "destroys the requested school" do
        sign_in admin
        expect {
          delete school_url(school)
        }.to change(School, :count).by(-1)
      end

      it "redirects to the schools list" do
        sign_in admin
        delete school_url(school)
        expect(response).to redirect_to(schools_url)
      end
    end

    context "As a School Admin" do
      it "does not destroy the requested school" do
        sign_in school_admin
        expect {
          delete school_url(school)
        }.to change(School, :count).by(0)
        expect(response).not_to be_successful
      end
    end

    context "As a Student" do
      it "does not destroy the requested school" do
        sign_in student
        expect {
          delete school_url(school)
        }.to change(School, :count).by(0)
        expect(response).not_to be_successful
      end
    end
  end
end
